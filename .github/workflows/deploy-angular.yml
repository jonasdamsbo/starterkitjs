name: Deploy angular

on:
  workflow_run:
    workflows: ["Build angular express devops"]
    types:
      - completed

permissions:
  id-token: write

env: # Pass secrets as environment variables
  AZURE_WEBAPP_NAME: ${{ vars.RESOURCENAME }}webapp # secret    # set this to your application's name
  AZURE_APIAPP_NAME: ${{ vars.RESOURCENAME }}apiapp
  AZURE_WEBAPP_PACKAGE_PATH: './angular/browser'      # set this to the path to your web app project, defaults to the repository root
  AZURE_APIAPP_PACKAGE_PATH: './express'
  NODE_VERSION: '20.15.1'                # set this to the node version to use
  DATABASE_URL: ${{ vars.DATABASE_URL }}
  SUBSCRIPTIONID: ${{ vars.SUBSCRIPTIONID }}
  TENANTID: ${{ vars.TENANTID }}
  CLIENTSECRET: ${{ vars.CLIENTSECRET }}
  CLIENTID: ${{ vars.CLIENTID }}
  STORAGEKEY: ${{ vars.STORAGEKEY }}
  RESOURCENAME: ${{ vars.RESOURCENAME }}
  TERRAFORMCONTAINER: ${{ vars.TERRAFORMCONTAINER }}
  BACKUPCONTAINER: ${{ vars.BACKUPCONTAINER }}
  RESOURCEGROUP: ${{ vars.RESOURCENAME }}resourcegroup # for backup
  SQLUSERNAME: ${{ vars.SQLUSERNAME }} # for backup
  SQLPASSWORD: ${{ vars.SQLPASSWORD }} # for backup
  SERVERNAME: ${{ vars.RESOURCENAME }}sqlserver # for backup
  DATABASENAME: ${{ vars.RESOURCENAME }}sqldatabase # for backup
  STORAGEACCOUNTNAME: ${{ vars.RESOURCENAME }}storageaccount # for backup

jobs:
  # deploy:

  #   #needs: [build-devops]

  #   runs-on: ubuntu-latest

  #   steps:
    
  #     - name: List Artifacts from Build Workflow
  #       run: |
  #         echo "Artifacts for workflow run ID: ${{ github.event.workflow_run.id }}"
  #         curl -H "Authorization: Bearer ${{ vars.PAT }}" \
  #           -H "Accept: application/vnd.github+json" \
  #           https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts
      
  #     - name: Download Angular Artifact
  #       uses: actions/download-artifact@v4.1.8
  #       with:
  #         name: angularartifact
  #         run-id: ${{ github.event.workflow_run.id }}
  #         github-token: ${{ vars.PAT }}
  #         path: ./angular

  #     - name: Download Express Artifact
  #       uses: actions/download-artifact@v4.1.8
  #       with:
  #         name: expressartifact
  #         run-id: ${{ github.event.workflow_run.id }}
  #         github-token: ${{ vars.PAT }}
  #         path: ./express

  #     - name: Download Scripts Artifact
  #       uses: actions/download-artifact@v4.1.8
  #       with:
  #         name: scriptsartifact
  #         run-id: ${{ github.event.workflow_run.id }}
  #         github-token: ${{ vars.PAT }}
  #         path: ./scripts

  #     - name: Download Terraform Artifact
  #       uses: actions/download-artifact@v4.1.8
  #       with:
  #         name: terraformartifact
  #         run-id: ${{ github.event.workflow_run.id }}
  #         github-token: ${{ vars.PAT }}
  #         path: ./terraform


  #     # - name: Azure login
  #     #   uses: azure/login@v2
  #     #   with:
  #     #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #     #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #     #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #     - name: Azure login
  #       uses: azure/login@v2
  #       with:
  #         client-id: ${{ env.CLIENTID }}
  #         tenant-id: ${{ env.TENANTID }}
  #         subscription-id: ${{ env.SUBSCRIPTIONID }}

  #     - name: Azure CLI script
  #       uses: azure/cli@v2
  #       with:
  #         azcliversion: latest
  #         inlineScript: |
  #           az account show
  #     # setup ^

  #     # for backup v
  #     - name: Install Azure CLI
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y curl apt-transport-https lsb-release gnupg
  #         curl -sL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
  #         AZ_REPO=$(lsb_release -cs)
  #         echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
  #         sudo apt-get update
  #         sudo apt-get install -y azure-cli


  #     - name: Export Database to Azure Storage
  #       shell: pwsh
  #       run: |
  #         $resourceGroup = "${{ env.RESOURCEGROUP }}"
  #         $serverName = "${{ env.SERVERNAME }}"
  #         $databaseName = "${{ env.DATABASENAME }}"
  #         $sqlname = "${{ env.SQLUSERNAME }}"
  #         $sqlpass = "${{ env.SQLPASSWORD }}"
  #         $storageAccount = "${{ env.STORAGEACCOUNTNAME }}"
  #         $containerName = "dbbackup"
  #         $storageKey = az storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query "[0].value" -o tsv
  #         $storageUri = "https://${storageAccount}.blob.core.windows.net/${containerName}/backup-${databaseName}-$(Get-Date -Format yyyyMMddHHmmss).bacpac"


  #         # Check if the database exists
  #         $dbExists = az sql db show `
  #           --resource-group $resourceGroup `
  #           --server $serverName `
  #           --name $databaseName `
  #           --query "name" -o tsv

  #         if (-not $dbExists) {
  #           Write-Output "Database '$databaseName' does not exist. Skipping export."
  #           exit 0
  #         }
  #         Write-Output "Database '$databaseName' exists. Proceeding with export."

  #         # temporarily enable access
  #         az sql server firewall-rule create `
  #           --resource-group $resourceGroup `
  #           --server $serverName `
  #           --name AllowAllWindowsAzureIps `
  #           --start-ip-address 0.0.0.0 `
  #           --end-ip-address 0.0.0.0

  #         # Wait for 5 seconds
  #         Start-Sleep -Seconds 5


  #         # Initiate the export
  #         az sql db export `
  #           --admin-user $sqlname `
  #           --admin-password $sqlpass `
  #           --name $databaseName `
  #           --resource-group $resourceGroup `
  #           --server $serverName `
  #           --storage-key $storageKey `
  #           --storage-key-type StorageAccessKey `
  #           --storage-uri $storageUri
  
  #         # Wait for 5 seconds
  #         Start-Sleep -Seconds 5


  #         # disable access again
  #         az sql server firewall-rule delete `
  #           --resource-group $resourceGroup `
  #           --server $serverName `
  #           --name AllowAllWindowsAzureIps

          
  #     - name: Verify Export
  #       shell: bash
  #       run: |
  #         echo "Checking exported file in Azure Storage"
  #         az storage blob list --account-name "jgdteststorageaccount" --container-name "dbbackup" --output table
  #     # for backup ^


  #     # terraform v
  #     - name: Run replacetokens.ps1
  #       run: ./scripts/replacetokens.ps1
  #       shell: pwsh

  #     # Step 2: Set up Terraform
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.5.7 # Specify the desired Terraform version

  #     # Step 3: Terraform Init
  #     - name: Terraform Init
  #       run: terraform init
  #       working-directory: ./terraform/

  #     # Step 4: Terraform Plan
  #     - name: Terraform Plan
  #       run: terraform plan -out=tfplan
  #       working-directory: ./terraform/

  #     # Step 5: Terraform Apply (Optional)
  #     - name: Terraform Apply
  #       #if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Optional conditional
  #       run: terraform apply -auto-approve tfplan
  #       working-directory: ./terraform/

  #     - name: Run setcloudvars.ps1
  #       run: ./scripts/setcloudvars.ps1
  #       shell: pwsh
  #     # terraform ^


  #     # try migrate v
  #     - name: Copy backend dependencies
  #       run: | 
  #         Copy-Item "./express/package-lock.json" -Destination "./package-lock.json"
  #         Copy-Item "./express/package.json" -Destination "./package.json"
  #       shell: pwsh

  #     - name: Set Up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.15.1'
  #         cache: npm

  #     - name: Install Dependencies
  #       run: npm ci
  #       working-directory: ./express

  #     # temporarily enable access
  #     # - name: Install Azure CLI
  #     #   run: |
  #     #     sudo apt-get update
  #     #     sudo apt-get install -y curl apt-transport-https lsb-release gnupg
  #     #     curl -sL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
  #     #     AZ_REPO=$(lsb_release -cs)
  #     #     echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
  #     #     sudo apt-get update
  #     #     sudo apt-get install -y azure-cli

  #     - name: temp disable firewall
  #       shell: pwsh
  #       run: |
  #         az sql server firewall-rule create `
  #         --resource-group "${{ env.RESOURCEGROUP }}" `
  #         --server "${{ env.SERVERNAME }}" `
  #         --name AllowAllWindowsAzureIps `
  #         --start-ip-address 0.0.0.0 `
  #         --end-ip-address 0.0.0.0

  #         Start-Sleep -Seconds 5

  #     # migrate and seed dummy data
  #     # - name: Run Prisma Migrations
  #     #   run: npx prisma migrate deploy
  #     #   working-directory: ./express

  #     - name: Seed the Database
  #       run: npx ts-node ./src/prisma/seed.ts
  #       env:
  #         DATABASE_URL: ${{ vars.DATABASE_URL }}
  #       working-directory: ./express

  #     # disable access
  #     - name: enable firewall again
  #       shell: pwsh
  #       run: |
  #         az sql server firewall-rule delete `
  #           --resource-group "${{ env.RESOURCEGROUP }}" `
  #           --server "${{ env.SERVERNAME }}" `
  #           --name AllowAllWindowsAzureIps

  #         Start-Sleep -Seconds 5
  #     # try migrate ^
      

  #     # deploy v
  #     - name: Deploy to Azure WebApp
  #       uses: azure/webapps-deploy@v2
  #       with:
  #         app-name: ${{ env.AZURE_WEBAPP_NAME }}
  #         package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  #     - name: Deploy to Azure ApiApp
  #       uses: azure/webapps-deploy@v2
  #       with:
  #         app-name: ${{ env.AZURE_APIAPP_NAME }}
  #         package: ${{ env.AZURE_APIAPP_PACKAGE_PATH }}
  #     # deploy ^

  backup:
    runs-on: ubuntu-latest
    steps:
    
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ env.CLIENTID }}
          tenant-id: ${{ env.TENANTID }}
          subscription-id: ${{ env.SUBSCRIPTIONID }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show

      # for backup v
      - name: Install Azure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y curl apt-transport-https lsb-release gnupg
          curl -sL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          AZ_REPO=$(lsb_release -cs)
          echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
          sudo apt-get update
          sudo apt-get install -y azure-cli

      - name: temp disable firewall
        shell: pwsh
        run: |
          # temporarily enable access
          az sql server firewall-rule create `
            --resource-group "${{ env.RESOURCEGROUP }}" `
            --server "${{ env.SERVERNAME }}" `
            --name AllowAllWindowsAzureIps `
            --start-ip-address 0.0.0.0 `
            --end-ip-address 0.0.0.0

          Start-Sleep -Seconds 5

      - name: Export Database to Azure Storage
        shell: pwsh
        run: |
          $resourceGroup = "${{ env.RESOURCEGROUP }}"
          $serverName = "${{ env.SERVERNAME }}"
          $databaseName = "${{ env.DATABASENAME }}"
          $sqlname = "${{ env.SQLUSERNAME }}"
          $sqlpass = "${{ env.SQLPASSWORD }}"
          $storageAccount = "${{ env.STORAGEACCOUNTNAME }}"
          $containerName = "${{ env.BACKUPCONTAINER }}"
          $storageKey = az storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query "[0].value" -o tsv
          $storageUri = "https://${storageAccount}.blob.core.windows.net/${containerName}/backup-${databaseName}-$(Get-Date -Format yyyyMMddHHmmss).bacpac"

          # Check if the database exists
          $dbExists = az sql db show `
            --resource-group $resourceGroup `
            --server $serverName `
            --name $databaseName `
            --query "name" -o tsv

          if (-not $dbExists) {
            Write-Output "Database '$databaseName' does not exist. Skipping export."
            exit 0
          }
          Write-Output "Database '$databaseName' exists. Proceeding with export."

          # Initiate the export
          az sql db export `
            --admin-user $sqlname `
            --admin-password $sqlpass `
            --name $databaseName `
            --resource-group $resourceGroup `
            --server $serverName `
            --storage-key $storageKey `
            --storage-key-type StorageAccessKey `
            --storage-uri $storageUri

      - name: enable firewall again
        shell: pwsh
        run: |
          # disable access
          Start-Sleep -Seconds 5

          az sql server firewall-rule delete `
            --resource-group "${{ env.RESOURCEGROUP }}" `
            --server "${{ env.SERVERNAME }}" `
            --name AllowAllWindowsAzureIps

      - name: Verify Export
        shell: bash
        run: |
          echo "Checking exported file in Azure Storage"
          az storage blob list --account-name "${{ env.STORAGEACCOUNTNAME }}" --container-name "${{ env.BACKUPCONTAINER }}" --output table
      # for backup ^

  terraform:
    needs: [backup]
    runs-on: ubuntu-latest
    steps:
    
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ env.CLIENTID }}
          tenant-id: ${{ env.TENANTID }}
          subscription-id: ${{ env.SUBSCRIPTIONID }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show

      - name: Download Scripts Artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: scriptsartifact
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ vars.PAT }}
          path: ./scripts

      - name: Download Terraform Artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: terraformartifact
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ vars.PAT }}
          path: ./terraform

      # terraform v
      - name: Run replacetokens.ps1
        run: ./scripts/replacetokens.ps1
        shell: pwsh

      # Step 2: Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7 # Specify the desired Terraform version

      # Step 3: Terraform Init
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform/

      # Step 4: Terraform Plan
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform/

      # Step 5: Terraform Apply (Optional)
      - name: Terraform Apply
        #if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Optional conditional
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform/

      - name: Run setcloudvars.ps1
        run: ./scripts/setcloudvars.ps1
        shell: pwsh
      # terraform ^

  migrate:
    needs: [terraform]
    runs-on: ubuntu-latest
    steps:
    
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ env.CLIENTID }}
          tenant-id: ${{ env.TENANTID }}
          subscription-id: ${{ env.SUBSCRIPTIONID }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show

      - name: Download Express Artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: expressartifact
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ vars.PAT }}
          path: ./express2

      # try migrate v
      - name: Copy backend dependencies
        run: | 
          Copy-Item "./express2/package-lock.json" -Destination "./package-lock.json"
          Copy-Item "./express2/package.json" -Destination "./package.json"
        shell: pwsh

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.15.1'
          cache: npm

      - name: Install Dependencies
        run: npm ci
        working-directory: ./express2

      - name: temp enable github agent ip
        shell: pwsh
        run: |
          # allow github agent ip
          $ip = Invoke-RestMethod -Uri 'https://api.ipify.org?format=json';
          az sql server firewall-rule create `
            --resource-group "${{ env.RESOURCEGROUP }}" `
            --server "${{ env.SERVERNAME }}" `
            --name AllowGithubAgentIp `
            --start-ip-address $ip.ip `
            --end-ip-address $ip.ip

          Start-Sleep -Seconds 5

      # migrate and seed dummy data
      # - name: Run Prisma Migrations
      #   run: npx prisma migrate deploy
      #   working-directory: ./express

      - name: Seed the Database
        run: npx ts-node ./src/prisma/seed.ts
        env:
          DATABASE_URL: ${{ vars.DATABASE_URL }}
        working-directory: ./express2

      - name: disable github agent ip
        shell: pwsh
        run: |
          # disable github agent ip
          Start-Sleep -Seconds 5

          az sql server firewall-rule delete `
            --resource-group "${{ env.RESOURCEGROUP }}" `
            --server "${{ env.SERVERNAME }}" `
            --name AllowGithubAgentIp
            
      # try migrate ^

  deploy:
    needs: [migrate]
    runs-on: ubuntu-latest
    steps:

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ env.CLIENTID }}
          tenant-id: ${{ env.TENANTID }}
          subscription-id: ${{ env.SUBSCRIPTIONID }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show

      - name: Download Angular Artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: angularartifact
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ vars.PAT }}
          path: ./angular

      - name: Download Express Artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: expressartifact
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ vars.PAT }}
          path: ./express

      # try copy dependencies
      - name: Copy backend dependencies
        run: | 
          Copy-Item "./express/package-lock.json" -Destination "./package-lock.json"
          Copy-Item "./express/package.json" -Destination "./package.json"
        shell: pwsh

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.15.1'
          cache: npm

      - name: Install Dependencies
        run: npm ci
        working-directory: ./express
    
      # deploy v
      - name: Deploy to Azure WebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Deploy to Azure ApiApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_APIAPP_NAME }}
          package: ${{ env.AZURE_APIAPP_PACKAGE_PATH }}
      # deploy ^